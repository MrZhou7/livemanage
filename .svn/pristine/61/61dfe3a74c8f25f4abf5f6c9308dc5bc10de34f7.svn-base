<?php
namespace app\model;
use think\Model;

class BaseModel extends Model
{
//    protected static $user;
//    protected static $time;
//    protected static $user_name;
//
//    public function initialize()
//    {
//        parent::initialize(); // TODO: Change the autogenerated stub
//        self::$user      = session("id")? session("id") : 0;
//        self::$user_name = session("staff_name") ? session("staff_name") : 0;
////        $this->user      = 1;
////        $this->user_name = 2;
//        self::$time      = date('Y-m-d H:i:s', time());
//    }

    /**
     *  单条数据插入 返回id
     */
    public static function addOne($parameter)
    {
        $addId = self::insertGetId($parameter);
        $res = $addId ? $addId : false;
        return $res;
    }
    //连接查询info
    public static function getBaseInfo($field, $where,$order ='')
    {
        $res = self::field($field)->where($where)->order($order)->find();
        return $res ? $res->toArray() : false;
    }

    //获取多表join查询结果集
    public static function getJoinList($field = '', $map = [], $join, $order = "", $except = false)
    {
        $list = self::alias('a')->field($field, $except)->where($map)->join($join)->order($order)->select()->toArray();
        return $list;
    }

    public static function getDistinctJoinList($field = '', $map = [], $join, $order = "", $except = false)
    {
        $list = self::alias('a')->field($field, $except)->distinct(true)->where($map)->join($join)->order($order)->select()->toArray();
        return $list;
    }
    //获取多表查询结果集
    public static function getList($field = '', $map = [],$order = "", $except = false)
    {
        $list = self::field($field, $except)->where($map)->order($order)->select()->toArray();
        return $list;
    }
    //获取多表join查询单挑数据
    public static function getJoinInfo($field, $where, $join)
    {
        $res = self::alias('a')->field($field)->where($where)->join($join)->find();
        return $res ? $res->toArray() : false;
    }

    public static function getDistinctJoinInfo($field, $where, $join)
    {
        $res = self::alias('a')->field($field)->distinct(true)->where($where)->join($join)->find();
        return $res ? $res->toArray() : false;
    }

    /**
     * allowField 方法非static 不能self
     * 获取多表join查询单挑数据
     */
//    public function saveInfo($data,$key,$value)
//    {
//        return $this->allowField(true)->save($data,[$key => $value]);
//    }

    /**
     * Notes: 添加多条数据
     * User: 任行乐
     * Date: 2019/4/12
     * Time: 16:30
     * @param $data
     * @return bool
     */
    public function baseSaveAll($data){
        return $this->saveAll($data);
    }

    /**
     * 新增/修改信息
     * 李琳
     * 2019-04-11 14:22
     * @param $data
     * @param $where
     * @param $act
     * @return bool
     */
    public function baseSaveInfo($data,$where=[],$act="insert"){
        if ($act=="insert"){
            if($this->where($data)->count()){
                return -1;
            }
        }
        return $this->allowField(true)->save($data,$where);
    }
    /**
     * 获取总记录及列表信息
     * 李琳
     * 2019-04-16
     * @param string $field
     * @param array $where
     * @param array $join
     * @param int $curr
     * @param int $listRows
     * @param bool $is_count
     * @param string $order
     * @param bool $except
     * @return array|float|string
     */
    public function getBaseList($is_count=false,$curr=1,$listRows=10,$field='*', $where=[],$join=[],$order="",$except=false)
    {
        if($is_count){
            $data = $this->alias('a')->where($where)->join($join)->count();
        }else{
            $data = $this->alias('a')->field($field, $except)->where($where)->join($join)->order($order)->page($curr,$listRows)->select()->toArray();
        }
        return $data;
    }

    /**
     * Notes: 获取分页列表
     * User: 任行乐
     * Date: 2019/4/16
     * Time: 10:19
     */
    public function getPageList($field = '*', $where = [], $order = "", $join = [], $curr = 1, $listRows = 10,$count = null, $except = false)
    {
        return $this->alias('a')->field($field, $except)->where($where)->join($join)->order($order)
            ->paginate($listRows, $count, ['page' => $curr]);
    }

    public function getDistinctPageList($field = '*', $where = [], $order = "", $join = [], $curr = 1, $listRows = 10,$count = null, $except = false)
    {
        return $this->alias('a')->field($field, $except)->distinct(true)->where($where)->join($join)->order($order)
            ->paginate($listRows, $count, ['page' => $curr]);
    }


    //查询单个值
    public static function getValue($map, $value, $order = '')
    {
        return self::where($map)->order($order)->value($value);
    }

    //查询一列值
    public static function getColumn($map, $value, $order = '')
    {
        return self::where($map)->order($order)->column($value);
    }

    //删除数据
//    public static function del($map)
//    {
//        return self::where($map)->delete();
//    }

    public static function del($map)
    {
        return self::where($map)->delete();
    }

    //统计数据
    public static function count($map)
    {
        return self::where($map)->count();
    }

    //自增
    public static function incs($map,$field,$num)
    {
        return self::where($map)->setInc($field,$num);
    }

    //自减
    public static function decs($map,$field,$num)
    {
        return self::where($map)->setDec($field,$num);
    }

}